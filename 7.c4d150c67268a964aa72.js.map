{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/input-shims-7a8a317c.js"],"names":["relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","cloneMap","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","jsSetFocus","contentEl","keyboardHeight","scrollData","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","scrollAmount","round","scrollDuration","max","abs","scrollPadding","inputSafeY","calcScrollData","closest","getBoundingClientRect","ownerDocument","defaultView","innerHeight","focus","scrollByPoint","then","setScrollPadding","tagName","parentElement","el","timer","PADDING_TIMER_KEY","clearTimeout","style","setProperty","setTimeout","WeakMap","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","dir","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","startInputShims","config","registerInput","coord","shadowRoot","querySelector","scrollEl","hideCaret","hideCaretMap","rmFn","scrollHideCaret","shouldHideCaret","onBlur","showCaret","addEventListener","removeEventListener","enableHideCaretOnScroll","scrollAssist","scrollAssistMap","touchStart","touchEnd","ev","endCoord","threshold","startCoord","deltaX","x","deltaY","y","hasPointerMoved","preventDefault","stopPropagation","doc","focused","didScroll","document","getNumber","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","active","matches","tapped","target","blur","_i","inputs_1","length","detail","fn"],"mappings":"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","file":"7.c4d150c67268a964aa72.js","sourcesContent":["import { p as pointerCoord } from './helpers-e0fdb9d0.js';\nvar cloneMap = new WeakMap();\nvar relocateInput = function (componentEl, inputEl, shouldRelocate, inputRelativeY) {\n    if (inputRelativeY === void 0) { inputRelativeY = 0; }\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nvar isFocused = function (input) {\n    return input === input.getRootNode().activeElement;\n};\nvar addClone = function (componentEl, inputEl, inputRelativeY) {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    var parentEl = inputEl.parentNode;\n    // DOM WRITES\n    var clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    var doc = componentEl.ownerDocument;\n    var tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = \"translate3d(\" + tx + \"px,\" + inputRelativeY + \"px,0) scale(0)\";\n};\nvar removeClone = function (componentEl, inputEl) {\n    var clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\nvar enableHideCaretOnScroll = function (componentEl, inputEl, scrollEl) {\n    if (!scrollEl || !inputEl) {\n        return function () { return; };\n    }\n    var scrollHideCaret = function (shouldHideCaret) {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    var onBlur = function () { return relocateInput(componentEl, inputEl, false); };\n    var hideCaret = function () { return scrollHideCaret(true); };\n    var showCaret = function () { return scrollHideCaret(false); };\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return function () {\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\n        inputEl.addEventListener('ionBlur', onBlur);\n    };\n};\nvar SKIP_SELECTOR = 'input, textarea, [no-blur]';\nvar enableInputBlurring = function () {\n    var focused = true;\n    var didScroll = false;\n    var doc = document;\n    var onScroll = function () {\n        didScroll = true;\n    };\n    var onFocusin = function () {\n        focused = true;\n    };\n    var onTouchend = function (ev) {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        var active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        var tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO: find a better way, why 50ms?\n        setTimeout(function () {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    doc.addEventListener('ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return function () {\n        doc.removeEventListener('ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\nvar SCROLL_ASSIST_SPEED = 0.3;\nvar getScrollData = function (componentEl, contentEl, keyboardHeight) {\n    var itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nvar calcScrollData = function (inputRect, contentRect, keyboardHeight, platformHeight) {\n    // compute input's Y values relative to the body\n    var inputTop = inputRect.top;\n    var inputBottom = inputRect.bottom;\n    // compute visible area\n    var visibleAreaTop = contentRect.top;\n    var visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    var safeAreaTop = visibleAreaTop + 15;\n    var safeAreaBottom = visibleAreaBottom * 0.5;\n    // figure out if each edge of the input is within the safe area\n    var distanceToBottom = safeAreaBottom - inputBottom;\n    var distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    var desiredScrollAmount = Math.round((distanceToBottom < 0)\n        ? -distanceToBottom\n        : (distanceToTop > 0)\n            ? -distanceToTop\n            : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    var scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    var distance = Math.abs(scrollAmount);\n    var duration = distance / SCROLL_ASSIST_SPEED;\n    var scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount: scrollAmount,\n        scrollDuration: scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4\n    };\n};\nvar enableScrollAssist = function (componentEl, inputEl, contentEl, keyboardHeight) {\n    var coord;\n    var touchStart = function (ev) {\n        coord = pointerCoord(ev);\n    };\n    var touchEnd = function (ev) {\n        // input cover touchend/mouseup\n        if (!coord) {\n            return;\n        }\n        // get where the touchend/mouseup ended\n        var endCoord = pointerCoord(ev);\n        // focus this input if the pointer hasn't moved XX pixels\n        // and the input doesn't already have focus\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // begin the input focus process\n            jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\n        }\n    };\n    componentEl.addEventListener('touchstart', touchStart, true);\n    componentEl.addEventListener('touchend', touchEnd, true);\n    return function () {\n        componentEl.removeEventListener('touchstart', touchStart, true);\n        componentEl.removeEventListener('touchend', touchEnd, true);\n    };\n};\nvar jsSetFocus = function (componentEl, inputEl, contentEl, keyboardHeight) {\n    var scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\n    if (Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        inputEl.focus();\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n    inputEl.focus();\n    // scroll the input into place\n    contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration).then(function () {\n        // the scroll view is in the correct position now\n        // give the native text input focus\n        relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n        // ensure this is the focused input\n        inputEl.focus();\n    });\n};\nvar hasPointerMoved = function (threshold, startCoord, endCoord) {\n    if (startCoord && endCoord) {\n        var deltaX = (startCoord.x - endCoord.x);\n        var deltaY = (startCoord.y - endCoord.y);\n        var distance = deltaX * deltaX + deltaY * deltaY;\n        return distance > (threshold * threshold);\n    }\n    return false;\n};\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\nvar enableScrollPadding = function (keyboardHeight) {\n    var doc = document;\n    var onFocusin = function (ev) {\n        setScrollPadding(ev.target, keyboardHeight);\n    };\n    var onFocusout = function (ev) {\n        setScrollPadding(ev.target, 0);\n    };\n    doc.addEventListener('focusin', onFocusin);\n    doc.addEventListener('focusout', onFocusout);\n    return function () {\n        doc.removeEventListener('focusin', onFocusin);\n        doc.removeEventListener('focusout', onFocusout);\n    };\n};\nvar setScrollPadding = function (input, keyboardHeight) {\n    if (input.tagName !== 'INPUT') {\n        return;\n    }\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n        return;\n    }\n    if (input.parentElement &&\n        input.parentElement.parentElement &&\n        input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n        return;\n    }\n    var el = input.closest('ion-content');\n    if (el === null) {\n        return;\n    }\n    var timer = el[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (keyboardHeight > 0) {\n        el.style.setProperty('--keyboard-offset', keyboardHeight + \"px\");\n    }\n    else {\n        el[PADDING_TIMER_KEY] = setTimeout(function () {\n            el.style.setProperty('--keyboard-offset', '0px');\n        }, 120);\n    }\n};\nvar INPUT_BLURRING = true;\nvar SCROLL_PADDING = true;\nvar startInputShims = function (config) {\n    var doc = document;\n    var keyboardHeight = config.getNumber('keyboardHeight', 290);\n    var scrollAssist = config.getBoolean('scrollAssist', true);\n    var hideCaret = config.getBoolean('hideCaretOnScroll', true);\n    var inputBlurring = config.getBoolean('inputBlurring', true);\n    var scrollPadding = config.getBoolean('scrollPadding', true);\n    var inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    var hideCaretMap = new WeakMap();\n    var scrollAssistMap = new WeakMap();\n    var registerInput = function (componentEl) {\n        var inputEl = (componentEl.shadowRoot || componentEl).querySelector('input') || (componentEl.shadowRoot || componentEl).querySelector('textarea');\n        var scrollEl = componentEl.closest('ion-content');\n        if (!inputEl) {\n            return;\n        }\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            var rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        if (!!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\n            var rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    var unregisterInput = function (componentEl) {\n        if (hideCaret) {\n            var fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if (scrollAssist) {\n            var fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    if (scrollPadding && SCROLL_PADDING) {\n        enableScrollPadding(keyboardHeight);\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input = inputs_1[_i];\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', (function (ev) {\n        registerInput(ev.detail);\n    }));\n    doc.addEventListener('ionInputDidUnload', (function (ev) {\n        unregisterInput(ev.detail);\n    }));\n};\nexport { startInputShims };\n"],"sourceRoot":""}