{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/shadow-css-4889ae62-23996f3f.js"],"names":["processRules","input","ruleCallback","inputWithEscapedBlocks","inputParts","split","_curlyRe","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","length","part","push","join","BLOCK_PLACEHOLDER","escapedString","blocks","escapeBlocks","nextBlockIndex","replace","_ruleRe","m","_i","arguments","selector","content","suffix","contentPrefix","startsWith","substring","rule","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","_polyfillHostNoCombinator","colonHostPartReplacer","host","_polyfillHost","colonHostContextPartReplacer","indexOf","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","map","shallowPart","scopeSelector","test","selectorNeedsScoping","res","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy_1","before","colon","after","applySimpleSelectorScope","t","matches","match","safeContent","placeholders","index","keep","replaceBy","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part_1","slice","applyStrictSelectorScope","scopeCss","scopeId","commentOriginalSelector","hostScopeId","slotScopeId","commentsWithHash","orgSelectors","processCommentedSelector_1","placeholder","comment","scopedCssText","slotAttr","compound","reduce","result","pattern","scopeCssText","forEach","_a"],"mappings":"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","file":"96.d38a00da38bfbe1eb629.js","sourcesContent":["import { __spreadArrays } from \"tslib\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function (selector) {\n    var placeholders = [];\n    var index = 0;\n    var content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    var ss = {\n        content: content,\n        placeholders: placeholders,\n    };\n    return ss;\n};\nvar restoreSafeSelector = function (placeholders, content) {\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) { return placeholders[+index]; });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function (input) {\n    return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function (input) {\n    return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function (input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var cssRule = {\n            selector: selector,\n            content: content\n        };\n        var rule = ruleCallback(cssRule);\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n};\nvar escapeBlocks = function (input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    var strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks\n    };\n    return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function (selector) {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nvar convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var parts = m[2].split(',');\n            var r = [];\n            for (var i = 0; i < parts.length; i++) {\n                var p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nvar convertColonSlotted = function (cssText, slotAttr) {\n    var regExp = _cssColonSlottedRe;\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var compound = m[2].trim();\n            var suffix = m[3];\n            var sel = '.' + slotAttr + ' > ' + compound + suffix;\n            return sel;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar convertColonHostContext = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n};\nvar makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nvar applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        var replaceBy_1 = \".\" + hostSelector;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n            return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                return before + replaceBy_1 + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n        var parts = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parts[_i - 1] = arguments[_i];\n        }\n        return parts[0];\n    });\n    var className = '.' + scopeSelector;\n    var _scopeSelectorPart = function (p) {\n        var scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            var t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                var matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    var safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    var shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n        var part_1 = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n        scopedSelector += scopedPart + \" \" + separator + \" \";\n        startIndex = sep.lastIndex;\n    }\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function (selector, scopeSelectorText, hostSelector, slotSelector) {\n    return selector.split(',')\n        .map(function (shallowPart) {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nvar scopeSelectors = function (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n    return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        var cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content: content\n        };\n        return cssRule;\n    });\n};\nvar scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    cssText = convertColonSlotted(cssText, slotScopeId);\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return cssText.trim();\n};\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\n    var hostScopeId = scopeId + '-h';\n    var slotScopeId = scopeId + '-s';\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n    if (commentOriginalSelector) {\n        var processCommentedSelector_1 = function (rule) {\n            var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n            var comment = \"/*!@\" + rule.selector + \"*/\";\n            orgSelectors.push({ placeholder: placeholder, comment: comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, function (rule) {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector_1(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector_1);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    var scopedCssText = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = __spreadArrays([scopedCssText], commentsWithHash).join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(function (_a) {\n            var placeholder = _a.placeholder, comment = _a.comment;\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    return cssText;\n};\nexport { scopeCss };\n"],"sourceRoot":""}